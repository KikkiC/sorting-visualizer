{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/CombSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["mergeSortAnimations","array","animations","auxiliaryArray","slice","length","mergeSort","mainArray","startIndex","endIndex","midIndex","Math","floor","k","i","j","push","mergeElements","quickSortAnimations","quickSort","startIdx","endIdx","pivotIdx","random","leftPointer","swap","partition","firstIdx","secondIdx","temp","combSortAnimations","gap","combSortHelper","combSort","ARRAY_BAR_NUMBER","window","screen","width","ARRAY_BAR_MAX_HEIGHT","height","SortingVisualizer","props","state","this","resetArray","min","max","setState","className","onClick","bubbleSort","insertionSort","map","value","idx","key","style","innerloop","swapped","bubbleSortAnimations","ColorChange","arrayBars","document","getElementsByClassName","color","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","background","barIndex","newHeight","barStyle","insertionSortAnimations","heapSortAnimations","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a39302fa.chunk.js","sourcesContent":["// Original mergeSort function without animations\r\n/*export const mergeSort = array => {\r\n    if (array.length === 1) {\r\n        return array;\r\n    }\r\n    const middle = Math.floor(array.length / 2);\r\n    const firstHalf = array.slice(0, middle);\r\n    const secondHalf = array.slice(middle);\r\n    return merge(\r\n        mergeSort(firstHalf), mergeSort(secondHalf)\r\n    );\r\n}\r\nfunction merge(firstHalf, secondHalf) {\r\n    let result = [], leftIndex = 0, rightIndex = 0;\r\n    while (leftIndex < firstHalf.length && rightIndex < secondHalf.length) {\r\n        if (firstHalf[leftIndex] < secondHalf[rightIndex]) {\r\n            result.push(firstHalf[leftIndex]);\r\n            leftIndex++;\r\n        } else {\r\n            result.push(secondHalf[rightIndex]);\r\n            rightIndex++;\r\n        }\r\n    }\r\n    return result\r\n        .concat(firstHalf.slice(leftIndex))\r\n        .concat(secondHalf.slice(rightIndex));\r\n}*/\r\n\r\nexport function mergeSortAnimations(array) {\r\n  let animations = [];\r\n  let auxiliaryArray = array.slice();\r\n  if (array.length <= 1) {\r\n      return array;\r\n  }\r\n\r\n  mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  array = animations;\r\n  return array;\r\n}\r\n\r\nfunction mergeSort(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\r\n  if (startIndex === endIndex) return;\r\n  const midIndex = Math.floor((startIndex + endIndex) / 2);\r\n  // Continue dividing the mainArray into single elements\r\n  mergeSort(auxiliaryArray, startIndex, midIndex, mainArray, animations);\r\n  mergeSort(auxiliaryArray, midIndex + 1, endIndex, mainArray, animations);\r\n  mergeElements(mainArray, startIndex, midIndex, endIndex, auxiliaryArray, animations);\r\n}\r\n\r\nfunction mergeElements(mainArray, startIndex, midIndex, endIndex, auxiliaryArray, animations) {\r\n  let k = startIndex, i = startIndex, j = midIndex + 1;\r\n  while (i <= midIndex && j <= endIndex) {\r\n    // Colour change for the comparing values\r\n    animations.push([i, j]);\r\n    // Revert colour change for comparing values\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // Overwrite value at index k in mainArray with value at index i from the auxiliary array\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // Overwrite value at index k in mainArray with value at index j from the auxiliary array\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= midIndex) {\r\n    // Colour change for the comparing values\r\n    animations.push([i, i]);\r\n    // Revert colour change for comparing values\r\n    animations.push([i, i]);\r\n    // Overwrite value at index k in mainArray with value at index i from the auxiliary array\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIndex) {\r\n    // Colour change for the comparing values\r\n    animations.push([j, j]);\r\n    // Revert colour change for comparing values\r\n    animations.push([j, j]);\r\n    // Overwrite value at index k in mainArray with value at index j from the auxiliary array\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}","export function quickSortAnimations(array) {\r\n    let animations = [];\r\n    let auxiliaryArray = array.slice();\r\n    quickSort(auxiliaryArray, 0, auxiliaryArray.length - 1, animations);\r\n\r\n    array = auxiliaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction quickSort(auxiliaryArray, startIdx, endIdx, animations) {\r\n    if (startIdx < endIdx) {\r\n        let pivotIdx = partition(auxiliaryArray, startIdx, endIdx, animations);\r\n        quickSort(auxiliaryArray, startIdx, pivotIdx - 1, animations);\r\n        quickSort(auxiliaryArray, pivotIdx + 1, endIdx, animations);\r\n    }\r\n}\r\n\r\nfunction partition(auxiliaryArray, startIdx, endIdx, animations) {\r\n    let pivotIdx = Math.floor(Math.random() * (endIdx - startIdx + 1) + startIdx);\r\n    let leftPointer = startIdx;\r\n\r\n    // Swap the position of the pivot and endIdx\r\n    animations.push([\"compare1\", pivotIdx, endIdx]);\r\n    animations.push([\"swap\", pivotIdx, auxiliaryArray[endIdx]]);\r\n    animations.push([\"swap\", endIdx, auxiliaryArray[pivotIdx]]);\r\n    animations.push([\"compare2\", pivotIdx, endIdx]);\r\n\r\n    swap(auxiliaryArray, pivotIdx, endIdx);\r\n\r\n    for (let i = startIdx; i < endIdx; i++) {\r\n        animations.push([\"compare1\", i, endIdx]);\r\n        animations.push([\"compare2\", i, endIdx]);\r\n        if (auxiliaryArray[i] < auxiliaryArray[endIdx]) {\r\n            animations.push([\"compare1\", i, leftPointer]);\r\n            animations.push([\"swap\", i, auxiliaryArray[leftPointer]]);\r\n            animations.push([\"swap\", leftPointer, auxiliaryArray[i]]);\r\n            animations.push([\"compare2\", i, leftPointer]);\r\n            swap(auxiliaryArray, i, leftPointer);\r\n            leftPointer++;\r\n        }\r\n    }\r\n\r\n    // Swap the pivot to the end of the array containing elements less than the pivot \r\n    animations.push([\"compare1\", leftPointer, endIdx]);\r\n    animations.push([\"swap\", endIdx, auxiliaryArray[leftPointer]]);\r\n    animations.push([\"swap\", leftPointer, auxiliaryArray[endIdx]]);\r\n    animations.push([\"compare2\", leftPointer, endIdx]);\r\n    \r\n    swap(auxiliaryArray, leftPointer, endIdx);\r\n    return leftPointer;\r\n}\r\n\r\nfunction swap(auxiliaryArray, firstIdx, secondIdx) {\r\n    let temp = auxiliaryArray[firstIdx];\r\n    auxiliaryArray[firstIdx] = auxiliaryArray[secondIdx];\r\n    auxiliaryArray[secondIdx] = temp;\r\n}","// Original combSort function without animations\r\n/* export const combSort = auxiliaryArray => {\r\n  let gap = auxiliaryArray.length;\r\n  let swap = true;\r\n  while (gap > 1 || swap === true) {\r\n    gap = combSortHelper(gap);\r\n    swap = false;\r\n    for (let i = 0; i < auxiliaryArray.length - gap; i++) {\r\n      if (auxiliaryArray[i] > auxiliaryArray[i + gap]) {\r\n        let temp = auxiliaryArray[i];\r\n        auxiliaryArray[i] = auxiliaryArray[i + gap];\r\n        auxiliaryArray[i + gap] = temp;\r\n        swap = true;\r\n      }\r\n    }\r\n    gap = Math.floor(gap / 1.3);\r\n  }\r\n  return auxiliaryArray;\r\n}\r\n\r\nfunction combSortHelper(gap) {\r\n    gap = Math.floor(gap / 1.3);\r\n    return (gap <=1? 1 : gap);\r\n} */\r\n\r\nexport function combSortAnimations(array) {\r\n    let animations = [];\r\n    let auxiliaryArray = array.slice();\r\n    combSort(auxiliaryArray, animations);\r\n\r\n    array = auxiliaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction combSort(auxiliaryArray, animations) {\r\n  let gap = auxiliaryArray.length;\r\n  let swap = true;\r\n  while (gap > 1 || swap === true) {\r\n    gap = combSortHelper(gap);\r\n    swap = false;\r\n    for (let i = 0; i < auxiliaryArray.length - gap; i++) {\r\n        animations.push([\"compare1\", i, i + gap]);\r\n        animations.push([\"compare2\", i, i + gap]);\r\n      if (auxiliaryArray[i] > auxiliaryArray[i + gap]) {\r\n        animations.push([\"swap\", i, auxiliaryArray[i + gap]]);\r\n        animations.push([\"swap\", i + gap, auxiliaryArray[i]]);\r\n        let temp = auxiliaryArray[i];\r\n        auxiliaryArray[i] = auxiliaryArray[i + gap];\r\n        auxiliaryArray[i + gap] = temp;\r\n        swap = true;\r\n      }\r\n    }\r\n    gap = Math.floor(gap / 1.3);\r\n  }\r\n  return auxiliaryArray;\r\n}\r\n\r\nfunction combSortHelper(gap) {\r\n    gap = Math.floor(gap / 1.3);\r\n    return (gap <=1? 1 : gap);\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport {mergeSortAnimations} from '../SortingAlgorithms/MergeSort.js';\r\nimport {bubbleSortAnimations} from '../SortingAlgorithms/BubbleSort.js';\r\nimport {quickSortAnimations} from '../SortingAlgorithms/QuickSort.js';\r\nimport {insertionSortAnimations} from '../SortingAlgorithms/InsertionSort.js';\r\nimport {heapSortAnimations} from '../SortingAlgorithms/HeapSort.js';\r\nimport {combSortAnimations} from '../SortingAlgorithms/CombSort.js';\r\n\r\nconst ANIMATION_SPEED_PER_MS = 10;\r\nconst ARRAY_BAR_NUMBER = (window.screen.width)/12.5;\r\nconst ARRAY_BAR_MAX_HEIGHT = (window.screen.height)/1.5;\r\nconst ARRAY_BAR_MIN_HEIGHT = 5;\r\nconst COMPARE_COLOR = 'red';\r\nconst FINISH_COLOR = 'teal';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.state = {\r\n        array: [],\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < ARRAY_BAR_NUMBER; i++) {\r\n          array.push(randomIntFromInterval(ARRAY_BAR_MIN_HEIGHT, ARRAY_BAR_MAX_HEIGHT));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div>\r\n            <div className=\"intro-container title\">\r\n                <p>SORTING VISUALIZER</p>\r\n                {/* TODO: create counter to display number of comparisons\r\n                <p className=\"small-text\">number of comparisons: </p> */}\r\n            </div>\r\n            <div className=\"array-container\">\r\n              <div className=\"button-area\">\r\n                <button className=\"primary-btn\" onClick={() => this.resetArray()}>New Array</button>\r\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                <button onClick={() => this.combSort()}>Comb Sort</button>\r\n                <button onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n                <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                {/* <button onClick={() => this.heapSort()}>Heap Sort</button> */}\r\n                </div> \r\n                {array.map((value, idx) => (\r\n                    <div className=\"array-bar\" \r\n                        key={idx} \r\n                        style={{height: `${value}px`,}}>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    bubbleSort() {\r\n        const [animations] = bubbleSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const ColorChange = animations[i][0] === \"compare1\" || animations[i][0] === \"compare2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if (ColorChange) {\r\n                const color = (animations[i][0] === \"compare1\") ? COMPARE_COLOR : FINISH_COLOR;\r\n                const [, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.background = color;\r\n                    barTwoStyle.background = color;\r\n                }, i * ANIMATION_SPEED_PER_MS);\r\n            }\r\n            else {\r\n                const [, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_PER_MS);  \r\n            }\r\n        }\r\n    }\r\n\r\n    combSort() {\r\n        const [animations] = combSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const ColorChange = animations[i][0] === \"compare1\" || animations[i][0] === \"compare2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if (ColorChange) {\r\n                const color = (animations[i][0] === \"compare1\") ? COMPARE_COLOR : FINISH_COLOR;\r\n                const [, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.background = color;\r\n                    barTwoStyle.background = color;\r\n                }, i * ANIMATION_SPEED_PER_MS);\r\n            }\r\n            else {\r\n                const [, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_PER_MS);  \r\n            }\r\n        }\r\n    }\r\n\r\n    insertionSort() {\r\n        const [animations] = insertionSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const ColorChange = animations[i][0] === \"compare1\" || animations[i][0] === \"compare2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if (ColorChange) {\r\n                const color = (animations[i][0] === \"compare1\") ? COMPARE_COLOR : FINISH_COLOR;\r\n                const [, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.background = color;\r\n                    barTwoStyle.background = color;\r\n                }, i * ANIMATION_SPEED_PER_MS);\r\n            }\r\n            else {\r\n                const [, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_PER_MS);  \r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n        const [animations] = quickSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const ColorChange = animations[i][0] === \"compare1\" || animations[i][0] === \"compare2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if (ColorChange) {\r\n                const color = (animations[i][0] === \"compare1\") ? COMPARE_COLOR : FINISH_COLOR;\r\n                const [, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.background = color;\r\n                    barTwoStyle.background = color;\r\n                }, i * ANIMATION_SPEED_PER_MS);\r\n            }\r\n            else {\r\n                const [, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_PER_MS);  \r\n            }\r\n        }\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = mergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const colorChange = i % 3 !== 2;\r\n        if (colorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? COMPARE_COLOR : FINISH_COLOR;\r\n            setTimeout(() => {\r\n                barOneStyle.background = color;\r\n                barTwoStyle.background = color;\r\n            }, i * ANIMATION_SPEED_PER_MS);\r\n        } else {\r\n            setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_PER_MS);\r\n        }\r\n    }\r\n  }\r\n\r\n    heapSort() {\r\n        const [animations] = heapSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const ColorChange = animations[i][0] === \"compare1\" || animations[i][0] === \"compare2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if (ColorChange) {\r\n                const color = (animations[i][0] === \"compare1\") ? COMPARE_COLOR : FINISH_COLOR;\r\n                const [, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.background = color;\r\n                    barTwoStyle.background = color;\r\n                }, i * ANIMATION_SPEED_PER_MS);\r\n            }\r\n            else {\r\n                const [, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_PER_MS);  \r\n            }\r\n        }\r\n        // Use this to check if the original sorting method without animations work\r\n/*         const javaScriptSortedArray = this.state.array.slice().sort((a, b) => a - b);\r\n        const heapSortedArray = SortingAlgorithms.heapSort(this.state.array);\r\n        console.log(equalArrays(javaScriptSortedArray, heapSortedArray)); */\r\n    }\r\n}\r\n\r\n// Taken from https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n\r\nfunction equalArrays(array1, array2) {\r\n    if (array1.length !== array2.length) return false;\r\n    for (let i = 0; i < array1.length; i++) {\r\n        if (array1[i] !== array2[i]) {\r\n        return false;\r\n        }\r\n    }\r\n    return true;\r\n}","// Original bubbleSort function with animations [TEST]\r\n/* export function bubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) {\r\n        return array;\r\n    }\r\n    const auxiliaryArray = array.slice();\r\n    bubbleSort(auxiliaryArray, animations);\r\n    array = auxiliaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction bubbleSort(auxiliaryArray, animations) {\r\n    let swapped;\r\n    do {\r\n        swapped = false;\r\n        for (let i = 0; i < auxiliaryArray.length; i++) {\r\n            animations.push([\"comparison1\", i, i+1]);\r\n            animations.push([\"comparison2\", i, i+1]);\r\n            if (auxiliaryArray[i] > auxiliaryArray[i + 1]) {\r\n                animations.push([\"swap\", i, auxiliaryArray[i+1]]);\r\n                animations.push([\"swap\", i+1, auxiliaryArray[i]]);\r\n                let temp = auxiliaryArray[i];\r\n                auxiliaryArray[i] = auxiliaryArray[i + 1];\r\n                auxiliaryArray[i + 1] = temp;\r\n                swapped = true;\r\n            }\r\n        }\r\n    } while (swapped);\r\n} */\r\n\r\nexport function bubbleSortAnimations(array) {\r\n  let animations  = [];\r\n  let auxiliaryArray = array.slice();\r\n//  let comparisons = 0;\r\n  bubbleSort(auxiliaryArray, animations);\r\n\r\n  array = auxiliaryArray;\r\n  return [animations, array];\r\n}\r\n\r\nfunction bubbleSort(auxiliaryArray, animations) {\r\n  let innerloop = auxiliaryArray.length - 1;\r\n  while(innerloop > 0) {\r\n      let swapped = false;\r\n      for(let i = 0; i < auxiliaryArray.length-1; ++i) {\r\n//          comparisons++;\r\n          animations.push([\"compare1\", i, i + 1]);\r\n          animations.push([\"compare2\", i, i + 1]);\r\n          if(auxiliaryArray[i] > auxiliaryArray[i + 1]) {\r\n//              comparisons++;\r\n              animations.push([\"swap\", i, auxiliaryArray[i + 1]]);\r\n              animations.push([\"swap\", i + 1, auxiliaryArray[i]]);\r\n              swapped = true;\r\n              let temp = auxiliaryArray[i];\r\n              auxiliaryArray[i] = auxiliaryArray[i+1];\r\n              auxiliaryArray[i+1] = temp;\r\n          }\r\n      }\r\n      // pushes largest value at the end of the array\r\n      if(swapped === false) break;\r\n      innerloop--;\r\n  }\r\n}","// Original insertionSort function without animations\r\n/* export const insertionSort = array => {\r\n    for (let i = 1; i < array.length; i++) {\r\n        let temp = array[i];\r\n        let j = i - 1;\r\n        while (j >= 0 && array[j] > temp) {\r\n            array[j + 1] = array[j];\r\n            j--;\r\n        }\r\n        array[j + 1] = temp;\r\n    }\r\n    return array;\r\n} */\r\n\r\nexport function insertionSortAnimations(array) {\r\n    let animations = [];\r\n    let auxiliaryArray = array.slice();\r\n    insertionSort(auxiliaryArray, animations);\r\n\r\n    array = auxiliaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction insertionSort(auxiliaryArray, animations) {\r\n    for (let i = 1; i < auxiliaryArray.length; i++) {\r\n        // Keep the current value of inserting element\r\n        let temp = auxiliaryArray[i];\r\n        let j = i - 1;\r\n        // Compare the values at index i and index j\r\n        animations.push([\"compare1\", i, j]);\r\n        animations.push([\"compare2\", i, j]); \r\n        while (j >= 0 && auxiliaryArray[j] > temp) {\r\n            // Overwrite the value with element at index j if the element \r\n            // at index j-1 is larger than the element of index j\r\n            animations.push([\"overwrite\", j + 1, auxiliaryArray[j]]);\r\n            auxiliaryArray[j + 1] = auxiliaryArray[j];\r\n            if (j >= 0) {\r\n                // Highlight the current index i comparing to index j\r\n                animations.push([\"compare1\", i, j]);\r\n                animations.push([\"compare2\", i, j]);\r\n            }\r\n            j--;\r\n        }\r\n        // Overwrite the first value that is larger than the temp with temp\r\n        animations.push([\"overwrite\", j + 1, temp]);\r\n        auxiliaryArray[j + 1] = temp;\r\n    }\r\n    return auxiliaryArray;\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}